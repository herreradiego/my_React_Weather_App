{"version":3,"sources":["Home.js","ErrorMsg.js","Loader.js","App.js","serviceWorker.js","index.js","gifCat.gif"],"names":["Home","props","react_default","a","createElement","className","userData","suburb","lib_default","name","iconId","weatherData","id","toString","flip","rotate","description","Math","round","temp","ErroMsg","Fragment","msg","Loader","src","imgLoader","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","loadingError","_this2","setState","window","navigator","geolocation","succes","_ref","asyncToGenerator","regenerator_default","mark","_callee","position","response","data","userPosition","wrap","_context","prev","next","console","log","coords","latitude","longitude","fetch","concat","sent","json","setData","getReverseGeo","t0","stop","_x","apply","arguments","getCurrentPosition","error","setErrorState","code","country","address","city","userState","lat","long","_ref2","_callee2","apiResponse","_context2","weather","main","icon","temp_min","temp_max","_x2","errorMsg","1","2","3","4","src_Loader","ErrorMsg","src_Home","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.c55cabfe.chunk.js","sourcesContent":["import React from 'react'\nimport WeatherIcon from 'react-icons-weather';\n\nconst Home = (props)=>{\n  \n    return(\n      <div className=\"home\">\n        <h2 className=\"weather-title\">Welcome stranger,\n        weather conditions for {props.userData.suburb}</h2>\n        {<WeatherIcon className=\"weather-Icon\" name=\"owm\" iconId={props.weatherData.id.toString()}  flip=\"horizontal\" rotate=\"90\" />}\n        <h3 className='weather-description'> {props.weatherData.description}</h3>\n        <h4 className='weather-temp'>temp: {Math.round(props.weatherData.temp)}â„ƒ</h4>\n      </div>\n      )\n}\n\nexport default Home","import React from 'react'\n\nconst ErroMsg = (props) =>{\n    return(\n      <React.Fragment>  \n        <h1> Something does not work well... :(</h1>\n        <h6>Error Message:{props.msg}</h6>\n        </React.Fragment>\n    )\n  }\n\nexport default ErroMsg","import React from 'react'\nimport imgLoader from './gifCat.gif'\nconst Loader = ()=>{\n    return (\n      <React.Fragment>\n        <h1>LOADING...</h1>\n        <img className='loader' src={imgLoader}/>\n      </React.Fragment>\n    )\n  }\n\nexport default Loader","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home'\nimport ErroMsg from './ErrorMsg'\nimport Loader from './Loader'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n\n    this.state={\n      userData:null,\n      isLoading:false,\n      loadingError:false,\n      weatherData:{}\n      }\n  }\n\n  componentDidMount(){\n    this.setState({\n      isLoading:true\n    })\n\n    //Check if Browser supports geolocation\n    if(window.navigator.geolocation){\n\n      navigator.geolocation.getCurrentPosition(succes,errorGeo);\n\n        async function succes(position){\n          try{\n            console.log(position.coords.latitude)\n            console.log(position.coords.longitude)\n            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${position.coords.latitude}&lon=${position.coords.longitude}`)\n            const data = await response.json()\n            const userPosition = await position;\n            setData(data,userPosition);\n            getReverseGeo(data)\n          }catch (err) {\n            console.log(err)\n        }\n          \n      }\n\n\n      function errorGeo(error){\n        setErrorState (error.code)\n        }\n\n    }else{\n      \n      setErrorState(4)\n\n    }\n\n    const setData = (data,userPosition)=>{\n     \n      if(data && userPosition){\n        \n        this.setState({\n          userData:{\n            country:data.address.country,\n            city:data.address.state, \n            userState:data.address.state,\n            suburb:data.address.suburb,\n            userPosition:{\n              lat:userPosition.coords.latitude,\n              long:userPosition.coords.longitude\n            }\n          },  \n        })\n      }\n    }\n\n    const getReverseGeo = async (data)=>{\n\n      try{\n        const apiResponse = await fetch(`https://openweathermap.org/data/2.5/weather?lat=${this.state.userData.userPosition.lat}&lon=${this.state.userData.userPosition.long}&appid=b6907d289e10d714a6e88b30761fae22`)\n        const response = await apiResponse.json()\n        console.log(\"TIME DATA\",response)\n        this.setState({\n          weatherData:{\n            id: response.weather[0].id,\n            main: response.weather[0].main,\n            description: response.weather[0].description,\n            icon: response.weather[0].icon,\n            temp:response.main.temp,\n            temp_min:response.main.temp_min,\n            temp_max:response.main.temp_max\n          },\n          isLoading:false\n        })\n      }catch(err){\n        console.log(err)\n      }\n      \n    }\n\n    const setErrorState = (error)=>{\n      const errorMsg = {\n        1:'PERMISSION_DENIED: Please give permission to use Geolocation on your browser ',\n        2:'POSITION_UNAVAILABLE: Your position is not available right now',\n        3:'TIMEOUT',\n        4:'Geolocation is not supported by this browser'\n      }\n\n      this.setState({\n        loadingError:true,\n        errorMsg:errorMsg[error],\n        isLoading:false\n      })\n    }\t\t\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <div className='container'>\n            {this.state.isLoading ? <Loader/> : (this.state.loadingError) ? <ErroMsg msg={this.state.errorMsg}/> : (this.state.userData && this.state.weatherData ? <Home weatherData ={this.state.weatherData} userData={this.state.userData}/>:null) }\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/gifCat.840d1cef.gif\";"],"sourceRoot":""}