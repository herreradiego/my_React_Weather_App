{"version":3,"sources":["logo.svg","Home.js","ErrorMsg.js","Loader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","props","console","log","userData","suburb","react_default","a","createElement","className","lib_default","name","iconId","weatherData","id","toString","flip","rotate","description","Math","round","temp","ErroMsg","Loader","Fragment","src","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","loadingError","_this2","setState","setData","data","userPosition","country","address","city","userState","lat","coords","latitude","long","longitude","getReverseGeo","_ref","asyncToGenerator","regenerator_default","mark","_callee","apiResponse","response","wrap","_context","prev","next","fetch","concat","sent","json","weather","main","icon","temp_min","temp_max","t0","stop","_x","apply","arguments","setErrorState","_succes","_callee2","position","_data","_context2","navigator","geolocation","getCurrentPosition","_x2","error","code","headers","Headers","content-type","mode","then","JSON","stringify","lon","userGeoPos","src_Loader","ErrorMsg","src_Home","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3216609.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport WeatherIcon from 'react-icons-weather';\n\nconst Home = (props)=>{\n\n    console.log(\"from home: \",props.userData.suburb)\n  \n    return(\n      <div className=\"container\">\n        <h2 className=\"weather-text\">Welcome stranger,\n        weather conditions for {props.userData.suburb}</h2>\n        {<WeatherIcon className=\"weather-Icon\" name=\"owm\" iconId={props.weatherData.id.toString()}  flip=\"horizontal\" rotate=\"90\" />}\n        <h3 className='weather-description'> {props.weatherData.description}</h3>\n        <h4 className='weather-temp'>temp: {Math.round(props.weatherData.temp)}â„ƒ</h4>\n        <p>Have a Lovely Day :)</p>\n        \n      </div>\n      )\n}\n\nexport default Home","import React from 'react'\n\nconst ErroMsg = () =>{\n    return(\n      <h1> Something does not work well... :(</h1>\n    )\n  }\n\nexport default ErroMsg","import React from 'react'\n\nconst Loader = ()=>{\n    return (\n      <React.Fragment>\n        <h1>LOADING...</h1>\n        <img className='loader' src={'https://thumbs.gfycat.com/GroundedKeenFinnishspitz-size_restricted.gif'}/>\n      </React.Fragment>\n    )\n  }\n\nexport default Loader","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './Home'\nimport ErroMsg from './ErrorMsg'\nimport Loader from './Loader'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n\n    this.state={\n      userData:null,\n      isLoading:false,\n      loadingError:false,\n      weatherData:{}\n      }\n  }\n\n  componentDidMount(){\n\n    this.setState({\n      isLoading:true\n    })\n\n    const data ={}\n\n    const setData = (data,userPosition)=>{\n     \n      if(data && userPosition){\n        \n        this.setState({\n          userData:{\n            country:data.address.country,\n            city:data.address.state, \n            userState:data.address.state,\n            suburb:data.address.suburb,\n            userPosition:{\n              lat:userPosition.coords.latitude,\n              long:userPosition.coords.longitude\n            }\n            \n          },\n        \n          \n          \n        })\n      }\n    }\n\n    const getReverseGeo = async (data)=>{\n\n      try{\n        const apiResponse = await fetch(`https://openweathermap.org/data/2.5/weather?lat=${this.state.userData.userPosition.lat}&lon=${this.state.userData.userPosition.long}&appid=b6907d289e10d714a6e88b30761fae22`)\n        const response = await apiResponse.json()\n        console.log(\"TIME DATA\",response)\n        this.setState({\n          weatherData:{\n            id: response.weather[0].id,\n            main: response.weather[0].main,\n            description: response.weather[0].description,\n            icon: response.weather[0].icon,\n            temp:response.main.temp,\n            temp_min:response.main.temp_min,\n            temp_max:response.main.temp_max\n          },\n          isLoading:false\n        })\n      }catch(err){\n        console.log(err)\n      }\n      \n    }\n\n    const setErrorState = ()=>{\n      console.log(\"setting value\")\n      this.setState({\n        loadingError:true,\n        isLoading:false\n      })\n    }\n\t\t\t\n\t\t\t//check if gelocation is available\n\t\t\t\n        \n    navigator.geolocation.getCurrentPosition(succes,errorGeo);\n\n        async function succes(position){\n          try{\n            console.log(position.coords.latitude)\n            console.log(position.coords.longitude)\n            const response = await fetch('https://nominatim.openstreetmap.org/reverse?format=json&lat=-34.5832157&lon=-58.4907768')\n            const data = await response.json()\n            const userPosition = await position;\n            setData(data,userPosition);\n            getReverseGeo(data)\n          }catch (err) {\n            console.log(err)\n        }\n          \n      }\n\n      function errorGeo(error){\n        setErrorState ()\n          console.log('GEOLOCALIZATION IS NOT WORKING ON YOUR BROWSER. ERROR CODE: ' + error.code)\n        }\n\t\t\t\n      \t\t  fetch('http://ip-api.com/json', {\n            headers: new Headers({'content-type': 'application/json'}),\n            mode: 'no-cors'}).then((response)=>{\n              console.log(\"ESTO\", JSON.stringify(response))\n\n                const latitude = response.lat;\n                const longitude = response.lon;  \n                const pos=[latitude,longitude]; \n                console.log(\"posicion: \",response)\n\n                this.setState({\n                  userGeoPos:{\n                    latitude:response.lat,\n                    longitude:response.lon\n                  }\n                })\n\n            }) \n        \t\t\t\n      \t\t\t\n\t\t\n  }\n  render() {\n    \n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <div className='container'>\n            {this.state.isLoading ? <Loader/> : (this.state.loadingError) ? <ErroMsg/> : (this.state.userData && this.state.weatherData ? <Home weatherData ={this.state.weatherData} userData={this.state.userData}/>:null) }\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}